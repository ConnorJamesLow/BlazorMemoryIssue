@page "/fetchdata"

@using ScrollingMemoryGrowth.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (Forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <span>Load</span>
    <input type="number" @bind="Count"/>
    <span>Items</span>
    <button @onclick="LoadMore">Go</button>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> Forecasts { get; set; } = new();
    private int Count { get; set; } = 5;

    protected override async Task OnInitializedAsync()
    {
        Forecasts.AddRange(await ForecastService.GetForecastAsync(DateTime.Now, 5));
    }

    private async Task LoadMore() => Forecasts
        .AddRange(await ForecastService.GetForecastAsync(DateTime.Now, Count));
}
